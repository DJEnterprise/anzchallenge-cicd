node {
     
     properties([parameters([string(defaultValue: '621255284514.dkr.ecr.ap-southeast-2.amazonaws.com', name: 'DOCKER_REPO_URL', trim: true), 
                             string(defaultValue: 'mydockerrepo', name: 'DOCKER_IMAGE_NAME', trim: true)])])
        
        def git_commit_hash = ''
        def docker_image_status = 0
   
        echo 'Building ANZ Challenge App!' 
            
            stage('Get Docker Image Version'){
                deleteDir()
                checkout([$class: 'GitSCM', branches:[[name: "master"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: "https://github.com/DJEnterprise/anzchallenge.git"]]])    
                env.git_commit_hash = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
                echo "Docker Image Version ${env.DOCKER_IMAGE_NAME}:${env.git_commit_hash}"
                sh """
                aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin ${env.DOCKER_REPO_URL}
                """
                docker_image_status = sh(script: """docker pull ${env.DOCKER_REPO_URL}/${env.DOCKER_IMAGE_NAME}:${env.git_commit_hash} > /dev/null && echo 1|| echo 0""", returnStdout: true).trim()
            }

        if(docker_image_status == '0'){
            stage('Code Scan by SonarQube'){
            try {
            withSonarQubeEnv(credentialsId: 'sonarqube') { 
             sh './gradlew -Dsonar.host.url=http://localhost:9000 sonarqube'
                }
            }
            catch (Exception e) {
                echo "SonarQube not configured. Make sure Sonarqube server is running and token is congigured. Skipping Code Analysis for this build."
                }
            }

            stage('Build Code'){
                sh """ 
                ./gradlew build
                """
                }
            stage('Docker Build and Push to Repo'){
                sh """
                aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin ${env.DOCKER_REPO_URL}
                docker build -t ${env.DOCKER_IMAGE_NAME}:${env.git_commit_hash} .
                docker tag ${env.DOCKER_IMAGE_NAME}:${env.git_commit_hash} ${env.DOCKER_REPO_URL}/${env.DOCKER_IMAGE_NAME}:${env.git_commit_hash}
                docker push ${env.DOCKER_REPO_URL}/${env.DOCKER_IMAGE_NAME}:${env.git_commit_hash}
                """
                }
            
        }else {
            echo "Docker Image Already exist for commit ${env.git_commit_hash}"
        }
}
    
